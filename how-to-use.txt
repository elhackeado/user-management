# This file contains the information about how to use the APIs.
# You can also refer the REDEME.md file for better formatted view of the same file under section "API Overview"
----------------------------------------------------------------------------------------------------------------

## Functionalities
==================
This section will give you a brief idea about the use and functionalities of the application.

1. A user can register with user attributes like `first name`, `last name`, `username` etc.
2. The application will check if the given username is available i.e. there should be no user with given username in the database.
3. The application will register the user if the unique username is provided.
4. By default user is in deactivated mode that means it can't login until it is activated by some Admin or email verification.
5. Admin will activate the user.
6. Now user can login using his registered credentials.
7. A user or Admin can change the details of the user like `first name`, `last name`, `pincode`.
8. A user can be deactivated by Admin.
9. A user can be deleted by Admin.
10. Admin can get list of all the users.
11. Admin can get details of a user.

***NOTE : Authentication/Authorization, Session Management, User activation by email verification and secured APIs is not yet implemented. So all the APIs can be accessed by anyone. These feature may come as the enhancements to the project in near future. Following section will give you more insight on why you would need these features.***


How To Use APIs
===============
A total of 7 APIs were developed to perform basic user management operations. <br>

* #### Register User `/users` - POST    ***To add new user***
* #### Get All Users `/users` - GET    ***To get list and count of all users***
* #### Get User Details `/users/<username>` - GET    ***To get details of a single user***
* #### Update User Details `/users/<username>` - PUT    ***To update details of a user***
* #### Delete User `/users/<username>` - DELETE    ***To delete a user***
* #### Activate User `/users/<username>/activate` - PATCH    ***To activate the user***
* #### Deactivate User `/users/<username>/deactivate` - PATCH    ***To deactivate a user*** <br>

Detailed description for each API is given below. This will give you a good idea what that particular API does and how you can use that API. <br>

### 1. Register New User
This API registers new user to the system. It takes `first name`, `last name`, `username`, `password`, `pincode` as an input and adds the user to the database with respective details. Here `username` attribute is the primary key so before adding the new user, the system checks that no user with same username exists in the database. If there is some user with the same username then it will not add new user to the system and returns a already exists message. Also the password hashing is implemented to avoid keeping `password` in plaint-text format. 
**Route** : `/users` <br>
**Method Type** : `POST` <br>
**Header** : `Content-Type: application/json` <br>
**Sample Request Body** : 
```json 
  {
      "fname": "Barry",
      "lname": "Allen",
      "username": "ballen",
      "password" : "speeditup",
      "pincode" : "740008"
    
  }
 ```
***After successful execution of the above request you will get the following respone*** <br>

**Sample Response Body** :
```json
  {
      "message":"new user registered sucessfully"
  }
```
***If user with the given username already exists in the database then following response is returned***
```json
  {
      "message":"user already exists"
  }
```

### 2. Get All Users
This API gets total count of registered users and list of usernames of all users in the system. This API doesn't require any input.

**Route** : `/users` <br>
**Method Type** : `GET` <br>
**Sample Request Body** : ***Not Needed***

***After successful execution of the above request you will get the following respone*** <br>

**Sample Response Body** :
```json
    {
        "totalUsers": 11,
        "users":  "BeverlyFox, SherrySchaefer, BethanyNelson, JessicaTaylor, GinaHansen, RobertJenkins, ChristopherOchoa, AudreyAnderson, JamesMills, SaraRobertson, MistyPalmer"
    }
```

### 3. Get User Details
This API gets details of a single user. This API takes username as a input in the URI which in turn gets the details of that user from the database. If the user with the given username doesn't exists the API returns a user doesn't exists message.


**Route** : `/users/<username>` <br>
**Method Type** : `GET` <br>
**Sample Request Body** : ***Not Needed***

***After successful execution of the above request you will get the following respone*** <br>

**Sample Response Body** :
```json
    {
    "access": 0,
    "fname": "Barry",
    "lname": "Allen",
    "pincode": 740008,
    "role": 0,
    "timestamp": "Thu, 21 Oct 2021 12:37:15 GMT",
    "username": "ballen"
    }
```
***If user with the given username doesn't exists the following message is given in response***
```json 
    {
        "message":"user doesn't exists"
    }
```

### 4. Update User Details
This API updates details of a single user. This API takes `username` as a input in the URI and `fname`, `lname` and `pincode` in the request body. This API also checks existence of the username in the database before updating the details, If the user with the given username doesn't exists the API returns a user doesn't exists message.


**Route** : `/users/<username>` <br>
**Method Type** : `PUT` <br>
**Sample Request Body** :
```json
    {
        "fname":"The",
        "lname":"Flash",
        "pincode":11111
    }
```

***After successful execution of the above request you will get the following respone*** <br>

**Sample Response Body** :
```json
    {
        "message": "details updated sucessfully"
    }
```
***If user with the given username doesn't exists the following message is given in response***
```json 
    {
        "message": "user doesn't exists"
    }
```

### 5. Delete User
This API deletes a single user from the database. This API takes `username` as an input in the URI. This API checks existence of the username in the database before deleting the user, If the user with the given username doesn't exists the API returns user doesn't exists message.


**Route** : `/users/<username>` <br>
**Method Type** : `DELETE` <br>
**Sample Request Body** : ***Not Needed***

***After successful execution of the above request you will get the following respone*** <br>

**Sample Response Body** :
```json
    {
        "message": "user deleted sucessfully"
    }
```
***If user with the given username doesn't exists the following message is given in response***
```json 
    {
        "message": "user doesn't exists"
    }
```

### 6. Activate User
By default, when any new user registers it is in deactivated mode until activated. So this particular API is used to activate the user by setting the user attribute `access=1` in the database. This API takes `username` as a input in the URI. This API checks existence of the username in the database before activating the user, If the user with the given username doesn't exists the API returns a user doesn't exists message. Also if the user is already activated then it returns already activated message.


**Route** : `/users/<username>/activate` <br>
**Method Type** : `PATCH` <br>
**Sample Request Body** : ***Not Needed***

***After successful execution of the above request you will get the following respone*** <br>

**Sample Response Body** :
```json
    {
        "message": "user activated sucessfully"
    }
```
***If user with the given username doesn't exists the following message is given in response***
```json 
    {
        "message": "user doesn't exists"
    }
```
***If user with the given username is already activated the following message is given in response***
```json 
    {
        "message": "user already activated"
    }
```

### 7. Deactivate User
This API is used to deactivate the user by setting the user attribute `access=0` in the database. This API takes `username` as an input in the URI. This API checks existence of the username in the database before deactivating the user, If the user with the given username doesn't exists the API returns user doesn't exists message. Also if the user is already deactivated then it returns already deactivated message.


**Route** : `/users/<username>/deactivate` <br>
**Method Type** : `PATCH` <br>
**Sample Request Body** : ***Not Needed***

***After successful execution of the above request you will get the following respone*** <br>

**Sample Response Body** :
```json
    {
        "message": "user deactivated sucessfully"
    }
```
***If user with the given username doesn't exists the following message is given in response***
```json 
    {
        "message": "user doesn't exists"
    }
```
***If user with the given username is already deactivated the following message is given in response***
```json 
    {
        "message": "user already deactivated"
    }
```
